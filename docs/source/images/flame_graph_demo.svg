<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="900" height="230" onload="init(evt)" viewBox="0 0 900 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="900.0" height="230.0" fill="url(#background)"  />
<text id="title" x="450.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="213" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="790.00" y="24" >Search</text>
<text id="ignorecase" x="874.00" y="24" >ic</text>
<text id="matched" x="790.00" y="213" > </text>
<g id="frames">
<g >
<title>firedrake.interpolation.Interpolator.interpolate (26,196 us, 0.41%)</title><rect x="688.7" y="101" width="3.6" height="15.0" fill="rgb(209,96,33)" rx="2" ry="2" />
<text  x="691.71" y="111.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (56,466 us, 0.89%)</title><rect x="14.9" y="117" width="7.8" height="15.0" fill="rgb(235,30,54)" rx="2" ry="2" />
<text  x="17.92" y="127.5" ></text>
</g>
<g >
<title>firedrake.function.Function.assign (163,585 us, 2.57%)</title><rect x="426.9" y="149" width="22.6" height="15.0" fill="rgb(242,48,44)" rx="2" ry="2" />
<text  x="429.86" y="159.5" >f..</text>
</g>
<g >
<title>firedrake.output.get_topology (808 us, 0.01%)</title><rect x="888.0" y="133" width="0.1" height="15.0" fill="rgb(226,226,34)" rx="2" ry="2" />
<text  x="890.97" y="143.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (56,466 us, 0.89%)</title><rect x="14.9" y="101" width="7.8" height="15.0" fill="rgb(238,25,43)" rx="2" ry="2" />
<text  x="17.92" y="111.5" ></text>
</g>
<g >
<title>firedrake.output.File.write (3,109,187 us, 48.87%)</title><rect x="458.0" y="149" width="430.1" height="15.0" fill="rgb(213,143,12)" rx="2" ry="2" />
<text  x="461.02" y="159.5" >firedrake.output.File.write</text>
</g>
<g >
<title>firedrake.mesh.MeshTopology._facets (7,583 us, 0.12%)</title><rect x="21.7" y="37" width="1.0" height="15.0" fill="rgb(240,89,23)" rx="2" ry="2" />
<text  x="24.68" y="47.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (16,473 us, 0.26%)</title><rect x="684.0" y="133" width="2.3" height="15.0" fill="rgb(205,169,11)" rx="2" ry="2" />
<text  x="687.00" y="143.5" ></text>
</g>
<g >
<title>VecPointwiseMult (13,577 us, 0.21%)</title><rect x="455.7" y="101" width="1.9" height="15.0" fill="rgb(211,65,41)" rx="2" ry="2" />
<text  x="458.72" y="111.5" ></text>
</g>
<g >
<title>firedrake.halo.Halo.local_to_global_begin (1,044 us, 0.02%)</title><rect x="393.9" y="101" width="0.2" height="15.0" fill="rgb(250,201,13)" rx="2" ry="2" />
<text  x="396.93" y="111.5" ></text>
</g>
<g >
<title>VecSet (3,055 us, 0.05%)</title><rect x="457.6" y="117" width="0.4" height="15.0" fill="rgb(221,148,1)" rx="2" ry="2" />
<text  x="460.59" y="127.5" ></text>
</g>
<g >
<title>firedrake.halo.Halo.global_to_local_begin (1,840 us, 0.03%)</title><rect x="393.5" y="101" width="0.2" height="15.0" fill="rgb(225,10,11)" rx="2" ry="2" />
<text  x="396.49" y="111.5" ></text>
</g>
<g >
<title>CreateSparsity (13,835 us, 0.22%)</title><rect x="174.7" y="117" width="1.9" height="15.0" fill="rgb(254,115,34)" rx="2" ry="2" />
<text  x="177.65" y="127.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (20,686 us, 0.33%)</title><rect x="884.5" y="117" width="2.9" height="15.0" fill="rgb(213,89,9)" rx="2" ry="2" />
<text  x="887.54" y="127.5" ></text>
</g>
<g >
<title>CreateFunctionSpace (318,768 us, 5.01%)</title><rect x="13.9" y="149" width="44.1" height="15.0" fill="rgb(211,123,39)" rx="2" ry="2" />
<text  x="16.94" y="159.5" >Crea..</text>
</g>
<g >
<title>pyop2.sequential.JITModule.compile (1,174 us, 0.02%)</title><rect x="692.2" y="69" width="0.1" height="15.0" fill="rgb(251,160,25)" rx="2" ry="2" />
<text  x="695.17" y="79.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (4,087 us, 0.06%)</title><rect x="885.4" y="101" width="0.6" height="15.0" fill="rgb(235,41,45)" rx="2" ry="2" />
<text  x="888.42" y="111.5" ></text>
</g>
<g >
<title>firedrake.assemble.assemble (1,851,875 us, 29.11%)</title><rect x="169.3" y="149" width="256.2" height="15.0" fill="rgb(219,51,32)" rx="2" ry="2" />
<text  x="172.33" y="159.5" >firedrake.assemble.assemble</text>
</g>
<g >
<title>firedrake.constant.Constant.assign (10,036 us, 0.16%)</title><rect x="425.5" y="149" width="1.4" height="15.0" fill="rgb(205,16,1)" rx="2" ry="2" />
<text  x="428.48" y="159.5" ></text>
</g>
<g >
<title>CreateMesh (3,028 us, 0.05%)</title><rect x="888.3" y="85" width="0.4" height="15.0" fill="rgb(234,153,37)" rx="2" ry="2" />
<text  x="891.27" y="95.5" ></text>
</g>
<g >
<title>firedrake.function.Function.interpolate (1,415,484 us, 22.25%)</title><rect x="688.3" y="133" width="195.8" height="15.0" fill="rgb(219,73,49)" rx="2" ry="2" />
<text  x="691.27" y="143.5" >firedrake.function.Functi..</text>
</g>
<g >
<title>firedrake.utility_meshes.SquareMesh (13,901 us, 0.22%)</title><rect x="888.1" y="133" width="1.9" height="15.0" fill="rgb(245,115,11)" rx="2" ry="2" />
<text  x="891.08" y="143.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (7,583 us, 0.12%)</title><rect x="21.7" y="69" width="1.0" height="15.0" fill="rgb(243,41,14)" rx="2" ry="2" />
<text  x="24.68" y="79.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (3,883 us, 0.06%)</title><rect x="886.9" y="85" width="0.5" height="15.0" fill="rgb(232,68,6)" rx="2" ry="2" />
<text  x="889.86" y="95.5" ></text>
</g>
<g >
<title>all (6,362,100 us, 100%)</title><rect x="10.0" y="181" width="880.0" height="15.0" fill="rgb(229,16,26)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>firedrake.interpolation.make_interpolator (1,386,099 us, 21.79%)</title><rect x="692.3" y="101" width="191.8" height="15.0" fill="rgb(227,86,16)" rx="2" ry="2" />
<text  x="695.33" y="111.5" >firedrake.interpolation.m..</text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (2,339 us, 0.04%)</title><rect x="686.0" y="85" width="0.3" height="15.0" fill="rgb(217,198,39)" rx="2" ry="2" />
<text  x="688.96" y="95.5" ></text>
</g>
<g >
<title>pyop2.sequential.JITModule.compile (106,933 us, 1.68%)</title><rect x="394.2" y="101" width="14.8" height="15.0" fill="rgb(221,132,22)" rx="2" ry="2" />
<text  x="397.17" y="111.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (7,583 us, 0.12%)</title><rect x="21.7" y="53" width="1.0" height="15.0" fill="rgb(215,166,21)" rx="2" ry="2" />
<text  x="24.68" y="63.5" ></text>
</g>
<g >
<title>firedrake.assemble.assemble_form (1,843,972 us, 28.98%)</title><rect x="170.4" y="133" width="255.1" height="15.0" fill="rgb(251,133,37)" rx="2" ry="2" />
<text  x="173.42" y="143.5" >firedrake.assemble.assemble_form</text>
</g>
<g >
<title>ParLoop_set_#x7fa90e5c3cd0_wrap_zero (9,106 us, 0.14%)</title><rect x="392.2" y="101" width="1.3" height="15.0" fill="rgb(243,4,16)" rx="2" ry="2" />
<text  x="395.23" y="111.5" ></text>
</g>
<g >
<title>ParLoop_Cells_wrap_expression_kernel (9,206 us, 0.14%)</title><rect x="690.9" y="69" width="1.3" height="15.0" fill="rgb(232,83,9)" rx="2" ry="2" />
<text  x="693.90" y="79.5" ></text>
</g>
<g >
<title>firedrake.interpolation.interpolate (1,414,420 us, 22.23%)</title><rect x="688.4" y="117" width="195.7" height="15.0" fill="rgb(211,218,27)" rx="2" ry="2" />
<text  x="691.42" y="127.5" >firedrake.interpolation.i..</text>
</g>
<g >
<title>firedrake.__init__ (804,596 us, 12.65%)</title><rect x="58.0" y="149" width="111.3" height="15.0" fill="rgb(207,99,11)" rx="2" ry="2" />
<text  x="61.04" y="159.5" >firedrake.__i..</text>
</g>
<g >
<title>firedrake (6,362,100 us, 100.00%)</title><rect x="10.0" y="165" width="880.0" height="15.0" fill="rgb(238,146,43)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >firedrake</text>
</g>
<g >
<title>ParLoopExecute (23,402 us, 0.37%)</title><rect x="689.1" y="85" width="3.2" height="15.0" fill="rgb(237,86,15)" rx="2" ry="2" />
<text  x="692.10" y="95.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (4,089 us, 0.06%)</title><rect x="684.6" y="117" width="0.6" height="15.0" fill="rgb(254,2,45)" rx="2" ry="2" />
<text  x="687.60" y="127.5" ></text>
</g>
<g >
<title>PCApply (13,577 us, 0.21%)</title><rect x="455.7" y="117" width="1.9" height="15.0" fill="rgb(219,144,18)" rx="2" ry="2" />
<text  x="458.72" y="127.5" ></text>
</g>
<g >
<title>ParLoopExecute (1,675,699 us, 26.34%)</title><rect x="177.2" y="117" width="231.8" height="15.0" fill="rgb(236,29,33)" rx="2" ry="2" />
<text  x="180.18" y="127.5" >ParLoopExecute</text>
</g>
<g >
<title>KSPSolve (20,851 us, 0.33%)</title><rect x="455.1" y="133" width="2.9" height="15.0" fill="rgb(209,13,48)" rx="2" ry="2" />
<text  x="458.13" y="143.5" ></text>
</g>
<g >
<title>firedrake.functionspace.VectorFunctionSpace (28,255 us, 0.44%)</title><rect x="884.1" y="133" width="3.9" height="15.0" fill="rgb(241,104,39)" rx="2" ry="2" />
<text  x="887.06" y="143.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (56,466 us, 0.89%)</title><rect x="14.9" y="85" width="7.8" height="15.0" fill="rgb(251,204,36)" rx="2" ry="2" />
<text  x="17.92" y="95.5" ></text>
</g>
<g >
<title>firedrake.function.Function.__init__ (14,361 us, 0.23%)</title><rect x="686.3" y="133" width="2.0" height="15.0" fill="rgb(249,179,29)" rx="2" ry="2" />
<text  x="689.28" y="143.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.get_shared_data (2,339 us, 0.04%)</title><rect x="686.0" y="101" width="0.3" height="15.0" fill="rgb(215,216,54)" rx="2" ry="2" />
<text  x="688.96" y="111.5" ></text>
</g>
<g >
<title>CreateMesh (3,028 us, 0.05%)</title><rect x="888.3" y="101" width="0.4" height="15.0" fill="rgb(247,151,49)" rx="2" ry="2" />
<text  x="891.27" y="111.5" ></text>
</g>
<g >
<title>firedrake.formmanipulation.split_form (1,889 us, 0.03%)</title><rect x="425.2" y="101" width="0.3" height="15.0" fill="rgb(218,26,41)" rx="2" ry="2" />
<text  x="428.22" y="111.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (255,258 us, 4.01%)</title><rect x="22.7" y="133" width="35.3" height="15.0" fill="rgb(211,8,23)" rx="2" ry="2" />
<text  x="25.73" y="143.5" >fi..</text>
</g>
<g >
<title>DMPlexInterp (8,738 us, 0.14%)</title><rect x="888.8" y="85" width="1.2" height="15.0" fill="rgb(246,107,32)" rx="2" ry="2" />
<text  x="891.79" y="95.5" ></text>
</g>
<g >
<title>MatZeroInitial (4,481 us, 0.07%)</title><rect x="176.6" y="117" width="0.6" height="15.0" fill="rgb(244,197,50)" rx="2" ry="2" />
<text  x="179.56" y="127.5" ></text>
</g>
<g >
<title>ParLoop_set_#x7fa90e5c3cd0_wrap_copy (24,422 us, 0.38%)</title><rect x="446.1" y="117" width="3.4" height="15.0" fill="rgb(215,100,54)" rx="2" ry="2" />
<text  x="449.11" y="127.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (4,084 us, 0.06%)</title><rect x="887.4" y="117" width="0.6" height="15.0" fill="rgb(229,114,40)" rx="2" ry="2" />
<text  x="890.40" y="127.5" ></text>
</g>
<g >
<title>CreateMesh (7,044 us, 0.11%)</title><rect x="13.9" y="117" width="1.0" height="15.0" fill="rgb(229,152,21)" rx="2" ry="2" />
<text  x="16.94" y="127.5" ></text>
</g>
<g >
<title>ParLoop_Cells_wrap_form00_cell_integral_otherwise (2,323 us, 0.04%)</title><rect x="182.5" y="101" width="0.3" height="15.0" fill="rgb(241,89,0)" rx="2" ry="2" />
<text  x="185.47" y="111.5" ></text>
</g>
<g >
<title>firedrake.functionspace.make_scalar_element (63,510 us, 1.00%)</title><rect x="13.9" y="133" width="8.8" height="15.0" fill="rgb(217,69,43)" rx="2" ry="2" />
<text  x="16.94" y="143.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.get_map (1,203 us, 0.02%)</title><rect x="883.9" y="85" width="0.2" height="15.0" fill="rgb(227,29,27)" rx="2" ry="2" />
<text  x="886.89" y="95.5" ></text>
</g>
<g >
<title>firedrake.halo.Halo.global_to_local_end (1,392 us, 0.02%)</title><rect x="393.7" y="101" width="0.2" height="15.0" fill="rgb(238,183,42)" rx="2" ry="2" />
<text  x="396.74" y="111.5" ></text>
</g>
<g >
<title>firedrake.functionspacedata.FunctionSpaceData.__init__ (3,060 us, 0.05%)</title><rect x="887.0" y="69" width="0.4" height="15.0" fill="rgb(229,34,40)" rx="2" ry="2" />
<text  x="889.98" y="79.5" ></text>
</g>
<g >
<title>ParLoop_Cells_wrap_form0_cell_integral_otherwise (1,514,161 us, 23.80%)</title><rect x="182.8" y="101" width="209.4" height="15.0" fill="rgb(242,171,43)" rx="2" ry="2" />
<text  x="185.79" y="111.5" >ParLoop_Cells_wrap_form0_ce..</text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (10,247 us, 0.16%)</title><rect x="886.0" y="101" width="1.4" height="15.0" fill="rgb(219,126,25)" rx="2" ry="2" />
<text  x="888.98" y="111.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.RectangleMesh (13,901 us, 0.22%)</title><rect x="888.1" y="117" width="1.9" height="15.0" fill="rgb(214,217,42)" rx="2" ry="2" />
<text  x="891.08" y="127.5" ></text>
</g>
<g >
<title>Mesh: numbering (4,518 us, 0.07%)</title><rect x="14.3" y="101" width="0.6" height="15.0" fill="rgb(254,199,49)" rx="2" ry="2" />
<text  x="17.29" y="111.5" ></text>
</g>
<g >
<title>firedrake.linear_solver.LinearSolver.solve (61,637 us, 0.97%)</title><rect x="449.5" y="149" width="8.5" height="15.0" fill="rgb(253,133,37)" rx="2" ry="2" />
<text  x="452.49" y="159.5" ></text>
</g>
<g >
<title>firedrake.mesh._from_cell_list (9,450 us, 0.15%)</title><rect x="888.7" y="101" width="1.3" height="15.0" fill="rgb(226,35,37)" rx="2" ry="2" />
<text  x="891.69" y="111.5" ></text>
</g>
<g >
<title>firedrake.utility_meshes.UnitSquareMesh (13,901 us, 0.22%)</title><rect x="888.1" y="149" width="1.9" height="15.0" fill="rgb(251,46,29)" rx="2" ry="2" />
<text  x="891.08" y="159.5" ></text>
</g>
<g >
<title>firedrake.functionspaceimpl.FunctionSpace.__init__ (8,109 us, 0.13%)</title><rect x="685.2" y="117" width="1.1" height="15.0" fill="rgb(239,138,49)" rx="2" ry="2" />
<text  x="688.16" y="127.5" ></text>
</g>
<g >
<title>firedrake.tsfc_interface.compile_form (119,373 us, 1.88%)</title><rect x="409.0" y="117" width="16.5" height="15.0" fill="rgb(244,22,31)" rx="2" ry="2" />
<text  x="411.97" y="127.5" ></text>
</g>
<g >
<title>ParLoopExecute (81,285 us, 1.28%)</title><rect x="438.2" y="133" width="11.3" height="15.0" fill="rgb(238,80,25)" rx="2" ry="2" />
<text  x="441.25" y="143.5" ></text>
</g>
</g>
</svg>
