#!/usr/bin/env python

from flask import Flask, render_template, jsonify, request, render_template_string, Blueprint
import webbrowser
from werkzeug.serving import make_server
import socket


class MyFlask(Flask):
    def run(self, host=None, port=None, debug=None, **options):
        options.setdefault("passthrough_errors", True)
        if port is None:
            port = 0
        try:
            server = make_server(host, port, self, **options)
        except socket.error as e:
            print "**** Unable to start server ****"
            raise e
        address = "http://%s:%s" % server.socket.getsockname()
        print " * Running on %s '(Press CTRL+C to quit)'" % address
        webbrowser.open_new(address)
        try:
            server.serve_forever()
        finally:
            self._got_first_request = False


def web_config(module):
    """Start a web server for configuring the Parameters on port 5000

    :arg parameters: a :class `firedrake.parameters.Parameters: class to be
        configured
    """

    import os
    import firedrake

    try:
        parameters = module.parameters
        if not isinstance(parameters, firedrake.Parameters):
            print "**** parameters object is of type %s, not Parameters ****" % (type(parameters).__name__)
            return
    except AttributeError:
        print "**** Unable to find parameters object in specified module (%s) ****" % module.__name__
        return
    static_files_folder = os.path.join(os.path.dirname(firedrake.__file__), "static")
    if hasattr(parameters, "static_files_folder"):
        static_files_folder = os.path.join(os.path.dirname(module.__file__),
                                           parameters.static_files_folder)
    app = MyFlask(__name__,
                  static_folder=static_files_folder,
                  template_folder=os.path.join(os.path.dirname(firedrake.__file__), "templates"))
    html_header = """
<div class="row" style="text-align: center;">
    <img src="{{ url_for('builtin-static.static', filename='banner.png')  }}" width="900px" alt="Firedrake Project Banner">
</div>
    """
    html_footer = """
<footer class="footer" role="contentinfo">
        <span class="glyphicons glyphicons-copyright-mark"></span> Copyright 2013, Imperial College London and others.
</footer>
    """
    builtin_static = Blueprint('builtin-static', __name__, static_url_path='/builtin-static',
                               static_folder=os.path.join(os.path.dirname(firedrake.__file__), "builtin-static"))
    app.register_blueprint(builtin_static)
    if hasattr(parameters, "html_header"):
        html_header = parameters.html_header
    if hasattr(parameters, "html_footer"):
        html_footer = parameters.html_footer

    def format_dict(parameters):
        """Format the parameters to a dictionary for rendering"""
        ret = []
        for k, v in parameters.iteritems():
            if not isinstance(v, dict):
                ret.append({"key": k,
                            "type": str(parameters.get_key(k).type),
                            "value": v,
                            "depends": k.depends if k.depends is not None else '',
                            "visibility_level": k.visibility_level,
                            "help": k.help})
            else:
                ret.append({"key": k,
                            "type": "dict",
                            "depends": k.depends if k.depends is not None else '',
                            "visibility_level": k.visibility_level,
                            "summary": render_docstring(v.summary),
                            "value": format_dict(v)})
        return ret

    @app.route('/')
    def index():
        """Entry point of webpage

        Show a form with inputs.
        """
        params = format_dict(parameters.unwrapped_dict(-1))
        return render_template('index.html', parameters=params,
                               summary=render_docstring(parameters.summary),
                               path=os.path.abspath(config_file),
                               max_visibility_level=parameters.max_visibility_level,
                               header=render_template_string(html_header),
                               footer=render_template_string(html_footer))

    def prefixed_name(name, prefix):
        if prefix == '':
            return name
        else:
            return prefix + '[name]'

    def validate_input(parameters, dictionary, prefix=''):
        """Validate inputs using the validation information in Parameters"""
        from firedrake.parameters import Parameters
        err = {}
        for k in parameters.keys():
            if (k not in dictionary.keys()):
                continue
            if isinstance(parameters[k], Parameters):
                err.update(validate_input(parameters[k],
                                          dictionary[k],
                                          prefixed_name(k, prefix)
                                         ))
            else:
                if not parameters.get_key(k).validate(dictionary[k]):
                    err[prefixed_name(k, prefix)] = parameters.get_key(k).type._last_error
        return err

    @app.route('/validate', methods=["GET", "POST"])
    def validate():
        """Validate inputs posted in JSON format"""
        import json
        dictionary = json.loads(request.form['parameters'])
        validate_result = validate_input(parameters, dictionary)
        if validate_result == {}:
            return jsonify(successful=True)
        else:
            return jsonify(successful=False, err=validate_result), 400

    @app.route('/save', methods=["GET", "POST"])
    def save():
        """Save inputs posted in JSON format into Parameters"""
        import json
        dictionary = json.loads(request.form['parameters'])
        validate_result = validate_input(parameters, dictionary)
        if validate_result != {}:
            return jsonify(successful=False, err=validate_result), 400
        from firedrake.parameters import load_from_dict
        load_from_dict(parameters, dictionary)
        json.dump(dictionary, open(config_file, 'w'))
        return jsonify(successful=True)

    @app.route('/fetch')
    def fetch():
        """Fetch current Parameter setting"""
        return jsonify(**parameters.unwrapped_dict(-1))

    def render_docstring(docstring):
        if docstring == "":
            return ""
        from docrepr.sphinxify import sphinxify
        import tempfile
        srcdir = tempfile.mkdtemp(dir=tempfile.gettempdir())
        return sphinxify(docstring, srcdir)

    def load_config_file():
        import json
        from firedrake.parameters import load_from_dict
        try:
            dictionary = json.load(open(config_file, 'r'))
            load_from_dict(parameters, dictionary)
        except Exception as e:
            print e.message

    load_config_file()
    app.run(host="127.0.0.1")


if __name__ == '__main__':
    import argparse
    import importlib
    parser = argparse.ArgumentParser(
        description="Run a web server to configure the module")
    parser.add_argument("module_name", help="The name of the module, it must \
                        contain an attribute of type `firedrake.parameters.Parameters` \
                        of name `parameters`")
    parser.add_argument("--config_file", required=True,
                        help="The path of file storing the configuration file")
    args = parser.parse_args()
    module_name = args.module_name
    config_file = args.config_file
    module = importlib.import_module(module_name)
    web_config(module)
