#! /usr/bin/env python
import platform
import subprocess
import sys
import os
import shutil
from argparse import ArgumentParser, RawDescriptionHelpFormatter


class InstallError(Exception):
    # Exception for generic install problems.
    pass


if os.path.basename(__file__) == "firedrake-install":
    mode = "install"
elif os.path.basename(__file__) == "firedrake-update":
    mode = "update"
    os.chdir(os.path.dirname(__file__) + "/../..")
else:
    sys.exit("Script must be invoked either as firedrake-install or firedrake-update")

branches = {}

# Disgusting hack, are we running on travis?
travis = "TRAVIS" in os.environ
travis_cache_dir = os.environ.get("CACHE_DIRECTORY", None)

if mode == "install":
    # Handle command line arguments.
    parser = ArgumentParser(description="""Install firedrake and its dependencies.""",
                            epilog="""The install process has three steps.

1. Any required system packages are installed using brew (MacOS) or apt (Ubuntu
   and similar Linux systems). On a Linux system without apt, the installation
   will fail if a dependency is not found.

2. A set of standard and/or third party Python packages is installed to the
   specified install location.

3. The core set of Python packages is downloaded to ./firedrake/src/ and
   installed to the specified location.

The default install creates a virtualenv in ./firedrake and installs
inside that virtualenv.  Optionally, a global installation using the
default Python package location may be specified by passing the
--global option.  We recommend using the default virtualenv
installation mode.

The installer will ensure that the required configuration options are
passed to PETSc. In addition, any configure options which you provide
in the PETSC_CONFIGURE_OPTIONS environment variable will be
honoured.""",
                            formatter_class=RawDescriptionHelpFormatter)

    group = parser.add_mutually_exclusive_group()
    group.add_argument("--global", action='store_true', dest="system",
                       help="Install to the default global location on the current platform.")
    group.add_argument("--developer", action='store_true',
                       help="Install in developer mode where the core packages are run from their source directories. Due to an upstream bug, petsc4py will not be installed in developer mode.")
    parser.add_argument("--sudo", action='store_true',
                        help="Use sudo when installing system dependencies and python packages. Regardless of the presence of this flag, sudo will never be used to install packages into $HOME or ./firedrake but sudo will always be used when installing system dependencies using apt.")

    parser.add_argument("--log", action='store_true',
                        help="Produce a verbose log of the installation process in firedrake-install.log. If you have problem running this script, please include this log in any bug report you file.")
    parser.add_argument("--disable-ssh", "--disable_ssh", action="store_true",
                        help="Do not attempt to use ssh to clone git repositories: fall immediately back to https.")
    parser.add_argument("--no-package-manager", "--no_package_manager", action='store_false', dest="package_manager",
                        help="Do not attempt to use apt or homebrew to install operating system packages on which we depend.")
    parser.add_argument("--minimal-petsc", "--minimal_petsc", action="store_true",
                        help="Minimise the set of petsc dependencies installed. This creates faster build times (useful for build testing).")
    parser.add_argument("--honour-petsc-dir", "--honour_petsc_dir", action="store_true",
                        help="Usually it is best to let Firedrake build its own PETSc. If you wish to use another PETSc, set PETSC_DIR and pass this option.")
    parser.add_argument("--rebuild-script", "--rebuild_script", action="store_true",
                        help="Only rebuild the firedrake-install script. Use this option if your firedrake-install script is broken and a fix has been released in upstream Firedrake. You will need to specify any other options which you wish to be honoured by your new update script (eg. --developer or --sudo).")
    parser.add_argument("--package-branch", "--package_branch", type=str, nargs=2, action="append", metavar=("PACKAGE", "BRANCH"),
                        help="Specify which branch of a package to use. This takes two arguments, the package name and the branch.")
    parser.add_argument("--verbose", "-v", action="store_true", help="Produce more verbose debugging output.")
    parser.add_argument("--mpicc", type=str,
                        action="store", default="mpicc",
                        help="C compiler to use when building with MPI (default is 'mpicc')")

    if travis:
        parser.add_argument("--write-cache", action="store_true",
                            help="Write the travis cache and exit")
    args = parser.parse_args()

    if args.package_branch:
        branches = {package: branch for package, branch in args.package_branch}

    args.prefix = False  # Disabled as untested
else:
    parser = ArgumentParser(description="""Update this firedrake install to the latest versions of all packages.""",
                            formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument("--rebuild", action="store_true",
                        help="Rebuild all packages even if no new version is available. Usually petsc and petsc4py are only rebuilt if they change. All other packages are always rebuilt.")
    parser.add_argument("--honour-petsc-dir", action="store_true",
                        help="Usually it is best to let Firedrake build its own PETSc. If you wish to use another PETSc, set PETSC_DIR and pass this option.")
    parser.add_argument("--log", action='store_true',
                        help="Produce a verbose log of the update process in firedrake-update.log. If you have problem running this script, please include this log in any bug report you file.")
    parser.add_argument("--verbose", "-v", action="store_true", help="Produce more verbose debugging output.")

    args = parser.parse_args()
    args.system = False
    args.developer = False
    args.sudo = False
    args.package_manager = False
    args.minimal_petsc = False
    args.rebuild_script = False
    args.mpicc = False


# Where are packages installed relative to --root?
# This is a bit of a hack.
v = sys.version_info
sitepackages = "/usr/local/lib/python%d.%d/site-packages/" % (v.major, v.minor)
path_extension = ""

python = ["python"]
if args.sudo and args.system:
    sudopip = ["sudo", "pip"]
    pyinstall = ["sudo", "python", "setup.py", "install"]
else:
    sudopip = ["pip"]
    pyinstall = ["python", "setup.py", "install"]

pipinstall = sudopip + ["install"]
if not args.system:
    # virtualenv install
    # Use the pip from the virtualenv
    sudopip = [os.getcwd() + "/firedrake/bin/pip"]
    pipinstall = sudopip + ["install"]
    python = [os.getcwd() + "/firedrake/bin/python"]
    pyinstall = python + ["setup.py", "install"]
    sitepackages = os.path.join(os.getcwd(), "firedrake/lib/python%d.%d/site-packages" % (v.major, v.minor))

os.environ["PYTHONPATH"] = path_extension + os.environ.get("PYTHONPATH", "")

if args.minimal_petsc:
    # WARNING WARNING
    # If you change these minimal PETSc options, you will have to
    # manually invalidate the Travis cache of PETSc and petsc4py.  See
    # https://docs.travis-ci.com/user/caching/#Clearing-Caches.
    petsc_opts = """--download-ctetgen --download-triangle --download-chaco --download-hdf5"""
else:
    petsc_opts = """--download-ctetgen --download-triangle --download-chaco --download-metis --download-parmetis --download-scalapack --download-hypre --download-mumps --download-netcdf --download-hdf5 --download-exodusii"""


if "PETSC_CONFIGURE_OPTIONS" not in os.environ:
    os.environ["PETSC_CONFIGURE_OPTIONS"] = petsc_opts
else:
    for opt in petsc_opts.split():
        if opt not in os.environ["PETSC_CONFIGURE_OPTIONS"]:
            os.environ["PETSC_CONFIGURE_OPTIONS"] += " " + opt


class Log(object):
    """Class to enable logging to screen and logfile at once."""
    def __init__(self, screen, log):
        self.files = [screen]
        if log:
            self.files.append(log)

    def write(self, string):
        for f in self.files:
            f.write(string)

log = file("firedrake-%s.log" % mode, "w") if args.log else None
stdout = Log(sys.stdout, log)
stderr = Log(sys.stderr, log)


def check_call(arguments):
    if args.log:
        try:
            stdout.write(subprocess.check_output(arguments, stderr=subprocess.STDOUT))
        except subprocess.CalledProcessError as e:
            stdout.write(e.output)
            raise
    else:
        subprocess.check_call(arguments)


def check_output(args):
    try:
        return subprocess.check_output(args, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        stdout.write(e.output)
        raise


def brew_install(name, options=None):
    try:
        # Check if it's already installed
        check_call(["brew", "list", name])
    except subprocess.CalledProcessError:
        # If not found, go ahead and install
        arguments = [name]
        if options:
            arguments = options + arguments
        if args.verbose:
            arguments = ["--verbose"] + arguments
        check_call(["brew", "install"] + arguments)


def apt_check(name):
    stdout.write("Checking for presence of package %s..." % name)
    # Note that subprocess return codes have the opposite logical
    # meanings to those of Python variables.
    if not subprocess.call(["dpkg-query", "-s", name]):
        stdout.write("installed.\n")
        return True
    else:
        stdout.write("missing.\n")
        return False


def apt_install(names):
    stdout.write("Installing missing packages: %s.\n" % ", ".join(names))
    subprocess.check_call(["sudo", "apt-get", "install"] + names)


def split_requirements_url(url):
    name = url.split(".git")[0].split("#")[0].split("/")[-1]
    spliturl = url.split("://")[1].split("#")[0].split("@")
    return name, spliturl


def git_clone(url):
    name, spliturl = split_requirements_url(url)
    if name == "petsc" and args.honour_petsc_dir:
        stdout.write("Using existing petsc installation\n")
        return name
    stdout.write("Cloning %s\n" % name)
    try:
        plainurl, branch = spliturl
    except ValueError:
        plainurl = spliturl[0]
        branch = "master"
    if name in branches:
        branch = branches[name]
    try:
        if args.disable_ssh:
            raise Exception
        check_call(["git", "clone", "-q", "-b", branch, "git@%s:%s" % tuple(plainurl.split("/", 1))])
        stdout.write("Successfully cloned %s branch %s.\n" % (name, branch))
    except:
        if not args.disable_ssh:
            stderr.write("Failed to clone %s using ssh, falling back to https.\n" % name)
        try:
            check_call(["git", "clone", "-q", "-b", branch, "https://%s" % plainurl])
            stdout.write("Successfully cloned %s branch %s.\n" % (name, branch))
        except subprocess.CalledProcessError:
            stderr.write("Failed to clone %s branch %s.\n" % (name, branch))
            raise
    return name


def list_cloned_dependencies(name):
    stdout.write("Finding dependencies of %s\n" % name)
    deps = []
    for dep in open(name + "/requirements-git.txt", "r"):
        name, _ = split_requirements_url(dep.strip())
        deps.append(name)
    return deps


def clone_dependencies(name):
    stdout.write("Cloning the dependencies of %s\n" % name)
    deps = []
    for dep in open(name + "/requirements-git.txt", "r"):
        deps.append(git_clone(dep.strip()))
    return deps


def git_update(name):
    # Update the named git repo and return true if the current branch actually changed.
    stdout.write("Updating the git repository for %s\n" % name)
    os.chdir(name)
    git_sha = check_output(["git", "rev-parse", "HEAD"])
    check_call(["git", "pull"])
    git_sha_new = check_output(["git", "rev-parse", "HEAD"])
    os.chdir("..")
    return git_sha != git_sha_new


def run_pip(args):
    stdout.write(" ".join(sudopip + args) + "\n")
    check_call(sudopip + args)


def run_pip_install(args):
    stdout.write(" ".join(pipinstall + args) + "\n")
    check_call(pipinstall + args)


def run_cmd(args):
    stdout.write(" ".join(args) + "\n")
    check_call(args)


def pip_requirements(package):
    stdout.write("Installing pip dependencies for %s\n" % package)
    if os.path.isfile("%s/requirements-ext.txt" % package):
        run_pip_install(["-r", "%s/requirements-ext.txt" % package])
    elif os.path.isfile("%s/requirements.txt" % package):
        run_pip_install(["-r", "%s/requirements.txt" % package])
    else:
        stdout.write("No dependencies found. Skipping.\n")


if travis:
    # Only enabled in travis mode
    # Utilise travis directory caching for petsc/petsc4py dependencies
    class directory(object):
        """Context manager that executes body in a given directory"""
        def __init__(self, dir):
            self.dir = dir

        def __enter__(self):
            self.olddir = os.path.abspath(os.getcwd())
            os.chdir(self.dir)

        def __exit__(self, *args):
            os.chdir(self.olddir)

    def get_src_hash(dir):
        with directory(dir):
            try:
                return check_output(["git", "rev-parse", "HEAD"])
            except subprocess.CalledProcessError:
                return None

    def get_cache_hash(dir):
        try:
            # Catch IOError both from missing directory and missing
            # file.
            with directory(dir):
                with open("cache-key", "r") as f:
                    return f.read()
        except (IOError, OSError):
            return None

    def write_cache_hash(dir, sha):
        with directory(dir):
            with open("cache-key", "w") as f:
                f.write(sha)

    def find_installed_dep(dep):
        try:
            if dep == "petsc":
                import petsc as p
            elif dep == "petsc4py":
                import petsc4py as p
            return os.path.dirname(p.__file__)
        except ImportError:
            return None

    def write_cache(dep, src_dir, cache_dir):
        cached_dep = os.path.join(cache_dir, dep)
        src_dep = os.path.join(src_dir, dep)
        installed_dep = find_installed_dep(dep)

        if installed_dep is None:
            stdout.write("Did not find installation of %s, not writing cache\n" % dep)
            return

        src_hash = get_src_hash(src_dep)
        if src_hash is None:
            stdout.write("Didn't find hash of source tree %s, not writing cache\n" % src_dep)
            return

        cache_hash = get_cache_hash(cached_dep)

        # If we're here, cache_hash might be None, but src_hash will not be
        if cache_hash == src_hash:
            # No need to update cache
            stdout.write("Cache %s is already up to date\n" % cached_dep)
            return

        shutil.rmtree(cached_dep, ignore_errors=True)
        shutil.copytree(installed_dep, cached_dep)
        write_cache_hash(cached_dep, src_hash)
        stdout.write("Successfully wrote cache %s\n" % cached_dep)

    def restore_cache(dep, src_dir, cache_dir, dest_dir):
        cached_dep = os.path.join(cache_dir, dep)
        installed_dep = os.path.join(dest_dir, dep)

        cache_hash = get_cache_hash(cached_dep)
        if cache_hash is None:
            stdout.write("No cache for %s found at %s\n" % (dep, cached_dep))
            return False

        if os.path.exists(cached_dep):
            stdout.write("Found cache for %s at %s with hash %s\n" % (dep, cached_dep, cache_hash))

        if not os.path.exists(src_dir):
            stdout.write("No source directory for %s found, can't check cache validity\n" % src_dir)
            # Outer install loop should handle this case
            return False

        src_hash = get_src_hash(src_dir)

        # At this point, src_hash may be None, but cache_hash will not be
        if src_hash == cache_hash:
            stdout.write("Cache is up to date for %s, using it\n" % dep)
            # Ensure this directory doesn't exist
            shutil.rmtree(installed_dep, ignore_errors=True)
            shutil.copytree(cached_dep, installed_dep)
            return True
        stdout.write("Cache was not up to date for %s (had key %s, needed %s)\n" %
                     (dep, cache_hash, src_hash))
        return False


def install(package):
    stdout.write("Installing %s\n" % package)
    if travis and travis_cache_dir and package in ["petsc/", "petsc4py/"]:
        # Try installing from travis cache
        src_dir = os.path.abspath(package)
        dest_dir = sitepackages
        installed = restore_cache(package, src_dir, travis_cache_dir, dest_dir)
        if installed:
            stdout.write("Installed %s from travis cache %s\n" % (package, travis_cache_dir))
            return
    # The following outrageous hack works around the fact that petsc cannot be installed in developer mode.
    if args.developer and package not in ["petsc/", "petsc4py/"]:
        run_pip_install(["-e", package])
    else:
        run_pip_install(["--ignore-installed", package])


def clean(package):
    stdout.write("Cleaning %s\n" % package)
    os.chdir(package)
    check_call(["python", "setup.py", "clean"])
    os.chdir("..")


def get_h5py():
    stdout.write("Downloading h5py\n")
    import urllib
    urllib.urlretrieve("https://github.com/h5py/h5py/archive/2.5.0.tar.gz",
                       "h5py.tar.gz")
    run_cmd(["tar", "-zxvf", "h5py.tar.gz"])


def build_and_install_h5py():
    stdout.write("Removing existing h5py installations\n")
    # Uninstalling something with pip is an absolute disaster.  We
    # have to use pip freeze to list all available packages "locally"
    # and keep on removing the one we want until it is gone from this
    # list!  Yes, pip will happily have two different versions of the
    # same package co-existing.  Moreover, depending on the phase of
    # the moon, the order in which they are uninstalled is not the
    # same as the order in which they appear on sys.path!
    again = True
    i = 0
    while again:
        # List installed packages, "locally".  In a virtualenv,
        # this just tells me packages in the virtualenv, otherwise it
        # gives me everything.
        lines = check_output(sudopip + ["freeze", "-l"])
        again = False
        for line in lines.split("\n"):
            # Do we have a locally installed h5py?
            if line.startswith("h5py"):
                # Uninstall it.
                run_pip(["uninstall", "-y", line.strip()])
                # Go round again, because THERE MIGHT BE ANOTHER ONE!
                again = True
        i += 1
        if i > 10:
            raise InstallError("pip claims it uninstalled h5py more than 10 times.  Something is probably broken.")

    stdout.write("Installing h5py\n")
    if os.path.exists("h5py-2.5.0"):
        clean("h5py-2.5.0")
    else:
        get_h5py()

    os.chdir("h5py-2.5.0")

    if args.honour_petsc_dir:
        petsc_dir = os.environ["PETSC_DIR"]
        petsc_arch = os.environ.get("PETSC_ARCH", "")
    else:
        try:
            petsc_dir = check_output(python +
                                     ["-c", "import petsc; print petsc.get_petsc_dir()"]).strip()

            petsc_arch = ""
        except subprocess.CalledProcessError:
            raise InstallError("Unable to find installed PETSc when building h5py")

    hdf5_dir = "%s/%s" % (petsc_dir, petsc_arch)
    stdout.write("Linking h5py against PETSc found in %s\n" % hdf5_dir)
    oldcc = os.environ.get("CC", None)
    os.environ["CC"] = args.mpicc
    run_cmd(python + ["setup.py", "configure", "--hdf5=%s" % hdf5_dir])
    run_cmd(python + ["setup.py", "build"])
    run_cmd(pyinstall)
    if oldcc is None:
        del os.environ["CC"]
    else:
        os.environ["CC"] = oldcc
    os.chdir("..")


def quit(message):
    stderr.write(message)
    sys.exit(1)


def build_update_script():
    stdout.write("Creating firedrake-update script.\n")
    with open("firedrake/scripts/firedrake-install", "r") as f:
        update_script = f.read()

    for switch in ["developer", "sudo", "system", "package_manager", "minimal_petsc",
                   "mpicc"]:
        update_script = update_script.replace("args.%s = False" % switch,
                                              "args.%s = %r" % (switch, args.__getattribute__(switch)))
    try:
        os.mkdir("../bin")
    except:
        pass
    with open("../bin/firedrake-update", "w") as f:
        f.write(update_script)
    check_call(["chmod", "a+x", "../bin/firedrake-update"])


if travis and travis_cache_dir and args.write_cache:
    # Cache update mode
    src_dir = os.path.abspath("src")
    write_cache("petsc", src_dir, travis_cache_dir)
    write_cache("petsc4py", src_dir, travis_cache_dir)
    stdout.write("Wrote caches, exiting\n")
    sys.exit(0)

if args.rebuild_script:
    os.chdir(os.path.dirname(os.path.realpath(__file__)) + ("/../.."))

    build_update_script()

    stdout.write("Successfully rebuilt firedrake-update.\n\n")

    stdout.write("To upgrade firedrake, run firedrake-update\n")
    sys.exit(0)


if "PETSC_DIR" in os.environ and not args.honour_petsc_dir:
    quit("""The PETSC_DIR environment variable is set. This is probably an error.
If you really want to use your own PETSc build, please run again with the
--honour-petsc-dir option.
""")

if travis:
    # Produce once a minute output so that travis doesn't think
    # we're stalled
    from multiprocessing import Process

    def stdout_writer():
        import time
        while True:
            time.sleep(60)
            print "."

    travis_writer = Process(target=stdout_writer)
    travis_writer.daemon = True
    travis_writer.start()

# Check operating system.
osname = platform.uname()[0]
if osname == "Darwin":
    if args.package_manager:
        try:
            check_call(["xcodebuild", "-version"])
        except:
            quit("Xcode not found. Please install xcode from the App Store and try again.")

        stdout.write("Installing command line tools...\n")
        try:
            check_call(["xcode-select", "--install"])
        except subprocess.CalledProcessError:
            # expected failure if already installed
            pass

        try:
            check_call(["brew", "--version"])
        except:
            quit("Homebrew not found. Please install it using the instructions at http://brew.sh and then try again.")

        stdout.write("Installing required packages via homebrew. You can safely ignore warnings that packages are already installed\n")
        # Ensure a fortran compiler is available
        brew_install("gcc")
        brew_install("openmpi")
        brew_install("python")
        brew_install("cmake")
        brew_install("spatialindex")

    else:
        stdout.write("Xcode and homebrew installation disabled. Proceeding on the rash assumption that packaged dependencies are in place.\n")

elif osname == "Linux":
    # Check for apt.
    try:
        if not args.package_manager:
            raise InstallError
        check_call(["apt-get", "--version"])

        apt_packages = ["build-essential",
                        "cmake",
                        "gfortran",
                        "git-core",
                        "libblas-dev",
                        "liblapack-dev",
                        "libopenmpi-dev",
                        "libspatialindex-dev",
                        "mercurial",
                        "openmpi-bin",
                        "python-dev",
                        "python-pip"]

        missing_packages = [p for p in apt_packages if not apt_check(p)]
        if missing_packages:
            apt_install(missing_packages)

    except (subprocess.CalledProcessError, InstallError):
        stdout.write("apt-get not found or disabled. Proceeding on the rash assumption that your compiled dependencies are in place.\n")
        stdout.write("If this is not the case, please install the following and try again:\n")
        stdout.write("* A C and C++ compiler (for example gcc/g++ or clang), GNU make\n")
        stdout.write("* A Fortran compiler (for PETSc)\n")
        stdout.write("* MPI\n")
        stdout.write("* Blas and Lapack\n")
        stdout.write("* Git, Mercurial\n")
        stdout.write("* Python version 2.7\n")
        stdout.write("* pip and the Python headers\n")
        stdout.write("* CMake\n")
        stdout.write("* libspatialindex and headers\n")

else:
    stdout.write("You do not appear to be running Linux or MacOS. Please do not be surprised if this install fails.\n")


if args.system and mode == "install":
    stdout.write("Creating firedrake directory structure.\n")
    try:
        os.mkdir("firedrake")
    except OSError:
        stderr.write("Failed to create firedrake directory. If there is a stale firedrake directory in the current directory, please remove it and try again.\n")
        raise

elif not args.system:
    try:
        import virtualenv
    except:
        stdout.write("Installing virtualenv.\n")
        # sys.real_prefix exists if we are already in the virtualenv
        if hasattr(sys, "real_prefix"):
            check_call(["pip", "install", "virtualenv"])
        else:
            check_call(["pip", "install", "--user", "virtualenv"])
        quit("Virtual env installed. Please run firedrake-install again.\n")
    if mode == "install":
        stdout.write("Creating firedrake virtualenv.\n")
        virtualenv.create_environment("firedrake", site_packages=False)
        # For some reason virtualenv does not always install the latest pip.
        run_pip_install(["-U", "pip"])
    execfile("firedrake/bin/activate_this.py", dict(__file__='path/to/activate_this.py'))

os.chdir("firedrake")
if mode == "install":
    os.mkdir("src")
    os.chdir("src")

    git_clone("git+https://github.com/firedrakeproject/firedrake.git")
    if travis:
        travis_pull_request = os.environ["TRAVIS_PULL_REQUEST"]
        travis_commit = os.environ["TRAVIS_COMMIT"]
        os.chdir("firedrake")
        if travis_pull_request != "false":
            check_call(["git", "fetch", "origin", "pull/" + travis_pull_request + "/merge"])
            check_call(["git", "checkout", "FETCH_HEAD"])
        else:
            check_call(["git", "checkout", travis_commit])
        os.chdir("..")

    packages = clone_dependencies("firedrake")
    packages = clone_dependencies("PyOP2") + packages
    packages += ["firedrake"]

    if args.honour_petsc_dir:
        packages.remove("petsc")

    # Force Cython to install first to work around pip dependency issues.
    run_pip_install(["Cython>=0.22"])

    # Need to install petsc first in order to resolve hdf5 dependency.
    if not args.honour_petsc_dir:
        pipinstall.append("--no-deps")
        packages.remove("petsc")
        install("petsc/")
        pipinstall.pop()

    for p in packages:
        pip_requirements(p)

    build_and_install_h5py()
    pipinstall.append("--no-deps")
    for p in packages:
        install(p+"/")
        if args.developer:
            pdir = os.getcwd() + "/" + p + os.pathsep
            os.environ["PYTHONPATH"] = pdir + os.environ.get("PYTHONPATH", "")
            path_extension = pdir + path_extension

    # Work around easy-install.pth bug.
    if args.developer:
        try:
            packages.remove("petsc")
        except ValueError:
            pass
        packages.remove("petsc4py")
        packages.remove("firedrake")
        v = sys.version_info
        easyinstall = file("../lib/python%d.%d/site-packages/easy-install.pth" % (v.major, v.minor), "r").readlines()
        new_packages = [os.getcwd() + "/" + p + "\n" for p in packages]
        file("../lib/python%d.%d/site-packages/easy-install.pth" % (v.major, v.minor), "w").writelines(
            easyinstall[:1] + new_packages + easyinstall[1:])

else:
    # Update mode
    os.chdir("src")

    packages = list_cloned_dependencies("PyOP2") + list_cloned_dependencies("firedrake")
    packages += ["firedrake"]

    # update packages.
    if not args.honour_petsc_dir:
        petsc_changed = git_update("petsc")
    else:
        petsc_changed = False
    petsc4py_changed = git_update("petsc4py")

    packages.remove("petsc")
    packages.remove("petsc4py")

    for p in packages:
        git_update(p)

    # update dependencies.
    pip_requirements("PyOP2")
    pip_requirements("firedrake")
    pipinstall.append("--no-deps")

    # Only rebuild petsc if it has changed.
    if not args.honour_petsc_dir and (args.rebuild or petsc_changed):
        clean("petsc/")
        install("petsc/")
    if args.rebuild or petsc_changed or petsc4py_changed:
        clean("petsc4py/")
        install("petsc4py/")

    # Always rebuild h5py.
    build_and_install_h5py()

    try:
        packages.remove("PyOP2")
        packages.remove("firedrake")
    except ValueError:
        pass
    packages += ("PyOP2", "firedrake")
    for p in packages:
        clean(p)
        install(p+"/")

build_update_script()

os.chdir("../..")

stdout.write("Successfully installed Firedrake.\n\n")

stdout.write("To upgrade firedrake, run firedrake/bin/firedrake-update\n")

if not args.system:
    stdout.write("\nFiredrake has been installed in a python virtualenv. You activate it with:\n\n")
    stdout.write("  . firedrake/bin/activate\n\n")
    stdout.write("The virtualenv can be deactivated by running:\n\n")
    stdout.write("  deactivate\n")


if travis:
    travis_writer.terminate()
