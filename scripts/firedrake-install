#! /usr/bin/env python
import logging
import platform
import subprocess
import sys
import os
import shutil
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from collections import OrderedDict
from distutils import dir_util

adjoint_deps = {
    "libadjoint": "git+https://bitbucket.org/dolfin-adjoint/libadjoint.git",
    "dolfin-adjoint": "git+https://bitbucket.org/dolfin-adjoint/dolfin-adjoint.git"
}


class InstallError(Exception):
    # Exception for generic install problems.
    pass


if os.path.basename(__file__) == "firedrake-install":
    mode = "install"
elif os.path.basename(__file__) == "firedrake-update":
    mode = "update"
    os.chdir(os.path.dirname(__file__) + "/../..")
else:
    sys.exit("Script must be invoked either as firedrake-install or firedrake-update")

branches = {}

# Disgusting hack, are we running on travis?
travis = "TRAVIS" in os.environ
travis_testing_firedrake = "FIREDRAKE_TRAVIS_TESTS" in os.environ
travis_cache_dir = os.environ.get("CACHE_DIRECTORY", None)

if mode == "install":
    # Handle command line arguments.
    parser = ArgumentParser(description="""Install firedrake and its dependencies.""",
                            epilog="""The install process has three steps.

1. Any required system packages are installed using brew (MacOS) or apt (Ubuntu
   and similar Linux systems). On a Linux system without apt, the installation
   will fail if a dependency is not found.

2. A set of standard and/or third party Python packages is installed to the
   specified install location.

3. The core set of Python packages is downloaded to ./firedrake/src/ and
   installed to the specified location.

The install creates a virtualenv in ./firedrake and installs inside
that virtualenv.

The installer will ensure that the required configuration options are
passed to PETSc. In addition, any configure options which you provide
in the PETSC_CONFIGURE_OPTIONS environment variable will be
honoured.""",
                            formatter_class=RawDescriptionHelpFormatter)

    group = parser.add_mutually_exclusive_group()
    group.add_argument("--developer", action='store_true',
                       help="Install in developer mode where the core packages are run from their source directories. Due to an upstream bug, petsc4py will not be installed in developer mode.")
    parser.add_argument("--sudo", action='store_true',
                        help="Use sudo when installing system dependencies and python packages. Regardless of the presence of this flag, sudo will never be used to install packages into $HOME or ./firedrake but sudo will always be used when installing system dependencies using apt.")
    parser.add_argument("--adjoint", action='store_true',
                        help="Also install firedrake-adjoint.")
    parser.add_argument("--slepc", action="store_true",
                        help="Install SLEPc along with PETSc")
    parser.add_argument("--log", action='store_true',
                        help="Produce a verbose log of the installation process in firedrake-install.log. If you have problem running this script, please include this log in any bug report you file.")
    parser.add_argument("--disable-ssh", "--disable_ssh", action="store_true",
                        help="Do not attempt to use ssh to clone git repositories: fall immediately back to https.")
    parser.add_argument("--no-package-manager", "--no_package_manager", action='store_false', dest="package_manager",
                        help="Do not attempt to use apt or homebrew to install operating system packages on which we depend.")
    parser.add_argument("--minimal-petsc", "--minimal_petsc", action="store_true",
                        help="Minimise the set of petsc dependencies installed. This creates faster build times (useful for build testing).")
    parser.add_argument("--honour-petsc-dir", "--honour_petsc_dir", action="store_true",
                        help="Usually it is best to let Firedrake build its own PETSc. If you wish to use another PETSc, set PETSC_DIR and pass this option.")
    parser.add_argument("--rebuild-script", "--rebuild_script", action="store_true",
                        help="Only rebuild the firedrake-install script. Use this option if your firedrake-install script is broken and a fix has been released in upstream Firedrake. You will need to specify any other options which you wish to be honoured by your new update script (eg. --developer or --sudo).")
    parser.add_argument("--package-branch", "--package_branch", type=str, nargs=2, action="append", metavar=("PACKAGE", "BRANCH"),
                        help="Specify which branch of a package to use. This takes two arguments, the package name and the branch.")
    parser.add_argument("--verbose", "-v", action="store_true", help="Produce more verbose debugging output.")
    parser.add_argument("--mpicc", type=str,
                        action="store", default="mpicc",
                        help="C compiler to use when building with MPI (default is 'mpicc')")
    parser.add_argument("--show-petsc-configure-options", action="store_true",
                        help="Print out the configure options passed to PETSc")

    if travis:
        parser.add_argument("--write-cache", action="store_true",
                            help="Write the travis cache and exit")
    args = parser.parse_args()

    if args.package_branch:
        branches = {package: branch for package, branch in args.package_branch}

    args.prefix = False  # Disabled as untested
else:
    parser = ArgumentParser(description="""Update this firedrake install to the latest versions of all packages.""",
                            formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument("--no-update-script", action="store_false", dest="update_script",
                        help="Do not update script before updating Firedrake.")
    parser.add_argument("--rebuild", action="store_true",
                        help="Rebuild all packages even if no new version is available. Usually petsc and petsc4py are only rebuilt if they change. All other packages are always rebuilt.")
    parser.add_argument("--adjoint", action='store_true', dest="install_adjoint",
                        help="Also install firedrake-adjoint.")
    parser.add_argument("--slepc", action="store_true", dest="install_slepc",
                        help="Install SLEPc along with PETSc")
    parser.add_argument("--honour-petsc-dir", action="store_true",
                        help="Usually it is best to let Firedrake build its own PETSc. If you wish to use another PETSc, set PETSC_DIR and pass this option.")
    parser.add_argument("--clean", action='store_true',
                        help="Delete any remnants of obsolete Firedrake components.")
    parser.add_argument("--log", action='store_true',
                        help="Produce a verbose log of the update process in firedrake-update.log. If you have problem running this script, please include this log in any bug report you file.")
    parser.add_argument("--verbose", "-v", action="store_true", help="Produce more verbose debugging output.")

    args = parser.parse_args()
    args.developer = False
    args.sudo = False
    args.package_manager = False
    args.minimal_petsc = False
    args.rebuild_script = False
    args.mpicc = False
    args.disable_ssh = False
    args.show_petsc_configure_options = False
    args.adjoint = False
    args.adjoint = args.adjoint or args.install_adjoint
    args.slepc = False
    args.slepc = args.slepc or args.install_slepc


# Where are packages installed relative to --root?
# This is a bit of a hack.
v = sys.version_info
sitepackages = "/usr/local/lib/python%d.%d/site-packages/" % (v.major, v.minor)
path_extension = ""

# Record of obsolete packages which --clean should remove from old installs.
old_git_packages = ["instant", "ffc"]

python = ["python"]
sudopip = ["pip"]
pyinstall = ["python", "setup.py", "install"]

pipinstall = sudopip + ["install"]
# virtualenv install
# Use the pip from the virtualenv
sudopip = [os.getcwd() + "/firedrake/bin/pip"]
pipinstall = sudopip + ["install"]
python = [os.getcwd() + "/firedrake/bin/python"]
pyinstall = python + ["setup.py", "install"]
sitepackages = os.path.join(os.getcwd(), "firedrake/lib/python%d.%d/site-packages" % (v.major, v.minor))

os.environ["PYTHONPATH"] = path_extension + os.environ.get("PYTHONPATH", "")

if args.minimal_petsc:
    # WARNING WARNING
    # If you change these minimal PETSc options, you will have to
    # manually invalidate the Travis cache of PETSc and petsc4py.  See
    # https://docs.travis-ci.com/user/caching/#Clearing-Caches.
    petsc_opts = """--download-ctetgen --download-triangle --download-chaco --download-hdf5 --download-hypre"""
else:
    petsc_opts = """--download-ctetgen --download-triangle --download-chaco --download-metis --download-parmetis --download-scalapack --download-hypre --download-mumps --download-netcdf --download-hdf5 --download-exodusii"""


if "PETSC_CONFIGURE_OPTIONS" not in os.environ:
    os.environ["PETSC_CONFIGURE_OPTIONS"] = petsc_opts
else:
    for opt in petsc_opts.split():
        if opt not in os.environ["PETSC_CONFIGURE_OPTIONS"]:
            os.environ["PETSC_CONFIGURE_OPTIONS"] += " " + opt


# Set up logging
if args.log:
    # Log to file at DEBUG level
    logging.basicConfig(level=logging.DEBUG,
                        format='%(asctime)s %(levelname)-6s %(message)s',
                        filename='firedrake-%s.log' % mode,
                        filemode='w')
    # Log to console at INFO level
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    formatter = logging.Formatter('%(message)s')
    console.setFormatter(formatter)
    logging.getLogger().addHandler(console)
else:
    # Log to console at INFO level
    logging.basicConfig(level=logging.INFO,
                        format='%(message)s')
log = logging.getLogger()


def check_call(arguments, env=None):
    if args.log:
        try:
            log.debug(subprocess.check_output(arguments, stderr=subprocess.STDOUT, env=env))
        except subprocess.CalledProcessError as e:
            log.debug(e.output)
            raise
    else:
        subprocess.check_call(arguments, env=env)


def check_output(args, env=None):
    try:
        return subprocess.check_output(args, stderr=subprocess.STDOUT, env=env)
    except subprocess.CalledProcessError as e:
        log.debug(e.output)
        raise


def brew_install(name, options=None):
    try:
        # Check if it's already installed
        check_call(["brew", "list", name])
    except subprocess.CalledProcessError:
        # If not found, go ahead and install
        arguments = [name]
        if options:
            arguments = options + arguments
        if args.verbose:
            arguments = ["--verbose"] + arguments
        check_call(["brew", "install"] + arguments)


def apt_check(name):
    log.info("Checking for presence of package %s..." % name)
    # Note that subprocess return codes have the opposite logical
    # meanings to those of Python variables.
    try:
        check_call(["dpkg-query", "-s", name])
        log.info("  installed.")
        return True
    except:
        log.info("  missing.")
        return False


def apt_install(names):
    log.info("Installing missing packages: %s." % ", ".join(names))
    if sys.stdin.isatty():
        subprocess.check_call(["sudo", "apt-get", "install"] + names)
    else: 
        log.info("Non-interactive stdin detected; installing without prompts")
        subprocess.check_call(["sudo", "apt-get", "-y", "install"] + names)


def split_requirements_url(url):
    name = url.split(".git")[0].split("#")[0].split("/")[-1]
    spliturl = url.split("://")[1].split("#")[0].split("@")
    try:
        plain_url, branch = spliturl
    except ValueError:
        plain_url = spliturl[0]
        branch = "master"
    return name, plain_url, branch


def git_url(plain_url, protocol):
    if protocol == "ssh":
        return "git@%s:%s" % tuple(plain_url.split("/", 1))
    elif protocol == "https":
        return "https://%s" % plain_url
    else:
        raise ValueError("Unknown git protocol: %s" % protocol)


def git_clone(url):
    name, plain_url, branch = split_requirements_url(url)
    if name == "petsc" and args.honour_petsc_dir:
        log.info("Using existing petsc installation\n")
        return name
    log.info("Cloning %s\n" % name)
    if name in branches:
        branch = branches[name]
    try:
        if args.disable_ssh:
            raise Exception
        check_call(["git", "clone", "-q", "-b", branch, git_url(plain_url, "git")])
        log.info("Successfully cloned %s branch %s." % (name, branch))
    except:
        if not args.disable_ssh:
            log.warn("Failed to clone %s using ssh, falling back to https." % name)
        try:
            check_call(["git", "clone", "-q", "-b", branch, git_url(plain_url, "https")])
            log.info("Successfully cloned %s branch %s." % (name, branch))
        except subprocess.CalledProcessError:
            log.error("Failed to clone %s branch %s." % (name, branch))
            raise
    return name


def list_cloned_dependencies(name):
    log.info("Finding dependencies of %s\n" % name)
    deps = OrderedDict()
    for dep in open(name + "/requirements-git.txt", "r"):
        name = split_requirements_url(dep.strip())[0]
        deps[name] = dep.strip()
    return deps


def clone_dependencies(name):
    log.info("Cloning the dependencies of %s" % name)
    deps = []
    for dep in open(name + "/requirements-git.txt", "r"):
        deps.append(git_clone(dep.strip()))
    return deps


def git_update(name, url=None):
    # Update the named git repo and return true if the current branch actually changed.
    log.info("Updating the git repository for %s" % name)
    os.chdir(name)
    git_sha = check_output(["git", "rev-parse", "HEAD"])
    # Disgusting hack, on travis we've checked out a detached head.
    if name == "firedrake" and travis and travis_testing_firedrake:
        travis_pull_request = os.environ["TRAVIS_PULL_REQUEST"]
        travis_commit = os.environ["TRAVIS_COMMIT"]
        if travis_pull_request != "false":
            check_call(["git", "fetch", "origin", "pull/" + travis_pull_request + "/merge"])
            check_call(["git", "checkout", "FETCH_HEAD"])
        else:
            check_call(["git", "checkout", travis_commit])
    else:
        # Ensure remotes get updated if and when we move repositories.
        if url:
            plain_url = split_requirements_url(url)[1]
            current_url = check_output(["git", "remote", "-v"]).split()[1]
            protocol = "https" if current_url.startswith("https") else "ssh"
            new_url = git_url(plain_url, protocol)
            # Ensure we only change from bitbucket to github and not the reverse.
            if new_url != current_url and "bitbucket.org" in current_url \
               and "github.com/firedrakeproject" in plain_url:
                log.info("Updating git remote for %s" % name)
                check_call(["git", "remote", "set-url", "origin", new_url])
        check_call(["git", "pull"])
    git_sha_new = check_output(["git", "rev-parse", "HEAD"])
    os.chdir("..")
    return git_sha != git_sha_new


def run_pip(args):
    log.info(" ".join(sudopip + args))
    check_call(sudopip + args)


def run_pip_install(pipargs):
    if args.log:
        # Make pip verbose when logging, so we see what the
        # subprocesses wrote out.
        # Particularly important for debugging petsc fails.
        pipargs = ["-vvv"] + pipargs
    log.info(" ".join(pipinstall + pipargs) + "\n")
    check_call(pipinstall + pipargs)


def run_cmd(args):
    log.info(" ".join(args) + "\n")
    check_call(args)


def pip_requirements(package):
    log.info("Installing pip dependencies for %s" % package)
    if os.path.isfile("%s/requirements-ext.txt" % package):
        run_pip_install(["-r", "%s/requirements-ext.txt" % package])
    elif os.path.isfile("%s/requirements.txt" % package):
        run_pip_install(["-r", "%s/requirements.txt" % package])
    else:
        log.info("No dependencies found. Skipping.")


if travis:
    # Only enabled in travis mode
    # Utilise travis directory caching for petsc/petsc4py dependencies
    class directory(object):
        """Context manager that executes body in a given directory"""
        def __init__(self, dir):
            self.dir = dir

        def __enter__(self):
            self.olddir = os.path.abspath(os.getcwd())
            os.chdir(self.dir)

        def __exit__(self, *args):
            os.chdir(self.olddir)

    def get_src_hash(dir):
        with directory(dir):
            try:
                return check_output(["git", "rev-parse", "HEAD"])
            except subprocess.CalledProcessError:
                return None

    def get_cache_hash(dir):
        try:
            # Catch IOError both from missing directory and missing
            # file.
            with directory(dir):
                with open("cache-key", "r") as f:
                    return f.read()
        except (IOError, OSError):
            return None

    def write_cache_hash(dir, sha):
        with directory(dir):
            with open("cache-key", "w") as f:
                f.write(sha)

    def find_installed_dep(dep):
        try:
            if dep == "petsc":
                import petsc as p
            elif dep == "petsc4py":
                import petsc4py as p
            return os.path.dirname(p.__file__)
        except ImportError:
            return None

    def write_cache(dep, src_dir, cache_dir):
        cached_dep = os.path.join(cache_dir, dep)
        src_dep = os.path.join(src_dir, dep)
        installed_dep = find_installed_dep(dep)

        if installed_dep is None:
            log.info("Did not find installation of %s, not writing cache\n" % dep)
            return

        src_hash = get_src_hash(src_dep)
        if src_hash is None:
            log.info("Didn't find hash of source tree %s, not writing cache\n" % src_dep)
            return

        cache_hash = get_cache_hash(cached_dep)

        # If we're here, cache_hash might be None, but src_hash will not be
        if cache_hash == src_hash:
            # No need to update cache
            log.info("Cache %s is already up to date\n" % cached_dep)
            return

        shutil.rmtree(cached_dep, ignore_errors=True)
        shutil.copytree(installed_dep, cached_dep)
        write_cache_hash(cached_dep, src_hash)
        log.info("Successfully wrote cache %s\n" % cached_dep)

    def restore_cache(dep, src_dir, cache_dir, dest_dir):
        cached_dep = os.path.join(cache_dir, dep)
        installed_dep = os.path.join(dest_dir, dep)

        cache_hash = get_cache_hash(cached_dep)
        if cache_hash is None:
            log.info("No cache for %s found at %s\n" % (dep, cached_dep))
            return False

        if os.path.exists(cached_dep):
            log.info("Found cache for %s at %s with hash %s\n" % (dep, cached_dep, cache_hash))

        if not os.path.exists(src_dir):
            log.info("No source directory for %s found, can't check cache validity\n" % src_dir)
            # Outer install loop should handle this case
            return False

        src_hash = get_src_hash(src_dir)

        # At this point, src_hash may be None, but cache_hash will not be
        if src_hash == cache_hash:
            log.info("Cache is up to date for %s, using it\n" % dep)
            # Ensure this directory doesn't exist
            shutil.rmtree(installed_dep, ignore_errors=True)
            shutil.copytree(cached_dep, installed_dep)
            return True
        log.info("Cache was not up to date for %s (had key %s, needed %s)\n" %
                 (dep, cache_hash, src_hash))
        return False


def install(package):
    log.info("Installing %s" % package)
    if travis and travis_cache_dir and package in ["petsc/", "petsc4py/"]:
        # Try installing from travis cache
        src_dir = os.path.abspath(package)
        dest_dir = sitepackages
        installed = restore_cache(package, src_dir, travis_cache_dir, dest_dir)
        if installed:
            log.info("Installed %s from travis cache %s\n" % (package, travis_cache_dir))
            return
    # The following outrageous hack works around the fact that petsc cannot be installed in developer mode.
    if args.developer and package not in ["petsc/", "petsc4py/", "slepc/", "slepc4py/"]:
        run_pip_install(["-e", package])
    else:
        run_pip_install(["--ignore-installed", package])


def clean(package):
    log.info("Cleaning %s" % package)
    os.chdir(package)
    check_call(["python", "setup.py", "clean"])
    os.chdir("..")


def get_h5py():
    log.info("Downloading h5py\n")
    import urllib
    urllib.urlretrieve("https://github.com/h5py/h5py/archive/2.5.0.tar.gz",
                       "h5py.tar.gz")
    run_cmd(["tar", "-zxvf", "h5py.tar.gz"])


def pip_uninstall(package):
    log.info("Removing existing %s installations\n" % package)
    # Uninstalling something with pip is an absolute disaster.  We
    # have to use pip freeze to list all available packages "locally"
    # and keep on removing the one we want until it is gone from this
    # list!  Yes, pip will happily have two different versions of the
    # same package co-existing.  Moreover, depending on the phase of
    # the moon, the order in which they are uninstalled is not the
    # same as the order in which they appear on sys.path!
    again = True
    i = 0
    while again:
        # List installed packages, "locally".  In a virtualenv,
        # this just tells me packages in the virtualenv, otherwise it
        # gives me everything.
        lines = check_output(sudopip + ["freeze", "-l"])
        again = False
        for line in lines.split("\n"):
            # Do we have a locally installed package?
            if line.startswith(package):
                # Uninstall it.
                run_pip(["uninstall", "-y", line.strip()])
                # Go round again, because THERE MIGHT BE ANOTHER ONE!
                again = True
        i += 1
        if i > 10:
            raise InstallError("pip claims it uninstalled h5py more than 10 times.  Something is probably broken.")


def build_and_install_h5py():
    pip_uninstall("h5py")

    log.info("Installing h5py\n")
    if os.path.exists("h5py-2.5.0"):
        clean("h5py-2.5.0")
    else:
        get_h5py()

    os.chdir("h5py-2.5.0")

    if args.honour_petsc_dir:
        petsc_dir = os.environ["PETSC_DIR"]
        petsc_arch = os.environ.get("PETSC_ARCH", "")
    else:
        try:
            petsc_dir = check_output(python +
                                     ["-c", "import petsc; print petsc.get_petsc_dir()"]).strip()

            petsc_arch = ""
        except subprocess.CalledProcessError:
            raise InstallError("Unable to find installed PETSc when building h5py")

    hdf5_dir = "%s/%s" % (petsc_dir, petsc_arch)
    log.info("Linking h5py against PETSc found in %s\n" % hdf5_dir)
    oldcc = os.environ.get("CC", None)
    os.environ["CC"] = args.mpicc
    run_cmd(python + ["setup.py", "configure", "--hdf5=%s" % hdf5_dir])
    run_cmd(python + ["setup.py", "build"])
    run_cmd(pyinstall)
    if oldcc is None:
        del os.environ["CC"]
    else:
        os.environ["CC"] = oldcc
    os.chdir("..")


def build_and_install_glpsol():
    log.info("Installing GLPK\n")
    if os.path.exists("glpk"):
        glpk_changed = git_update("glpk")
    else:
        git_clone("git+https://github.com/firedrakeproject/glpk.git")
        glpk_changed = True

    if glpk_changed:
        os.chdir("glpk")
        check_call(["./configure", "--disable-shared", "--disable-static"])
        check_call(["make"])
        check_call(["cp", "examples/glpsol", os.environ["VIRTUAL_ENV"] + "/bin/"])
        os.chdir("..")


def build_and_install_libspatialindex():
    log.info("Installing libspatialindex\n")
    if os.path.exists("libspatialindex"):
        libspatialindex_changed = git_update("libspatialindex")
    else:
        git_clone("git+https://github.com/firedrakeproject/libspatialindex.git")
        libspatialindex_changed = True

    if libspatialindex_changed:
        os.chdir("libspatialindex")
        # Clean source directory
        check_call(["git", "reset", "--hard"])
        check_call(["git", "clean", "-f", "-x", "-d"])
        # Patch Makefile.am to skip building test
        check_call(["sed", "-i", "-e", "/^SUBDIRS/s/ test//", "Makefile.am"])
        # Build and install
        check_call(["./autogen.sh"])
        check_call(["./configure", "--prefix=" + sys.prefix,
                    "--enable-shared", "--disable-static"])
        check_call(["make"])
        check_call(["make", "install"])
        os.chdir("..")


def build_and_install_slepc():
    try:
        petsc_dir = check_output(python + ["-c", "import petsc; print petsc.get_petsc_dir()"]).strip()
        petsc_arch = ""
    except subprocess.CalledProcessError:
        raise InstallError("Unable to find installed PETSc when building SLEPc")

    env = dict(os.environ)
    env["PETSC_ARCH"] = petsc_arch
    env["PETSC_DIR"] = petsc_dir

    git_clone("git+https://bitbucket.org/slepc/slepc.git")
    log.info("Installing SLEPc.")
    install("slepc/")

    git_clone("git+https://bitbucket.org/slepc/slepc4py.git")
    log.info("Installing slepc4py.")
    install("slepc4py/")


def build_and_install_adjoint():

    for package in adjoint_deps:
        try:
            git_update(package, adjoint_deps[package])
        except OSError as e:
            if e.errno == 2:
                log.warn("%s missing, cloning anew.\n" % p)
                git_clone(adjoint_deps[package])
            else:
                raise

    if args.honour_petsc_dir:
        petsc_dir = os.environ["PETSC_DIR"]
        petsc_arch = os.environ.get("PETSC_ARCH", "")
    else:
        try:
            petsc_dir = check_output(python +
                                     ["-c", "import petsc; print petsc.get_petsc_dir()"]).strip()

            petsc_arch = ""
        except subprocess.CalledProcessError:
            raise InstallError("Unable to find installed PETSc when building h5py")

    env = dict(os.environ)
    env["PETSC_ARCH"] = petsc_arch
    env["PETSC_DIR"] = petsc_dir

    os.chdir("libadjoint")
    dir_util.mkpath("build")

    os.chdir("build")
    log.info("Configuring libadjoint for virtualenv installation in %s" % os.environ["VIRTUAL_ENV"])
    check_call(["cmake", "-DCMAKE_INSTALL_PREFIX=%s" % os.environ["VIRTUAL_ENV"], ".."], env=env)
    log.info("Installing libadjoint.")
    check_call(["make", "install"])
    os.chdir("../..")

    install("dolfin-adjoint/")


def clean_obsolete_packages():
    dirs = os.listdir(".")
    for package in old_git_packages:
        pip_uninstall(package)
        if package in dirs:
            shutil.rmtree(package)


def quit(message):
    log.error(message)
    sys.exit(1)


def build_update_script():
    log.info("Creating firedrake-update script.")
    with open("firedrake/scripts/firedrake-install", "r") as f:
        update_script = f.read()

    for switch in ["developer", "sudo", "package_manager", "minimal_petsc",
                   "mpicc", "disable_ssh", "show_petsc_configure_options", "adjoint"]:
        update_script = update_script.replace("args.%s = False" % switch,
                                              "args.%s = %r" % (switch, args.__getattribute__(switch)))
    try:
        os.mkdir("../bin")
    except:
        pass
    with open("../bin/firedrake-update", "w") as f:
        f.write(update_script)
    check_call(["chmod", "a+x", "../bin/firedrake-update"])


if travis and travis_cache_dir and mode == "install" and args.write_cache:
    # Cache update mode
    src_dir = os.path.abspath("src")
    write_cache("petsc", src_dir, travis_cache_dir)
    write_cache("petsc4py", src_dir, travis_cache_dir)
    log.info("Wrote caches, exiting\n")
    sys.exit(0)

if args.show_petsc_configure_options:
    log.info("******************************************\n")
    log.info("Building PETSc with the following options:\n")
    log.info("******************************************\n")
    log.info("%s\n\n" % os.environ["PETSC_CONFIGURE_OPTIONS"])

if args.rebuild_script:
    os.chdir(os.path.dirname(os.path.realpath(__file__)) + ("/../.."))

    build_update_script()

    log.info("Successfully rebuilt firedrake-update.\n")

    log.info("To upgrade firedrake, run firedrake-update")
    sys.exit(0)


if "PETSC_DIR" in os.environ and not args.honour_petsc_dir:
    quit("""The PETSC_DIR environment variable is set. This is probably an error.
If you really want to use your own PETSc build, please run again with the
--honour-petsc-dir option.
""")

if travis:
    # Produce once a minute output so that travis doesn't think
    # we're stalled
    from multiprocessing import Process

    def stdout_writer():
        import time
        while True:
            time.sleep(60)
            print "."

    travis_writer = Process(target=stdout_writer)
    travis_writer.daemon = True
    travis_writer.start()

# Check operating system.
osname = platform.uname()[0]
if osname == "Darwin":
    if args.package_manager:
        try:
            check_call(["xcodebuild", "-version"])
        except:
            quit("Xcode not found. Please install xcode from the App Store and try again.")

        log.info("Installing command line tools...")
        try:
            check_call(["xcode-select", "--install"])
        except subprocess.CalledProcessError:
            # expected failure if already installed
            pass

        try:
            check_call(["brew", "--version"])
        except:
            quit("Homebrew not found. Please install it using the instructions at http://brew.sh and then try again.")

        log.info("Installing required packages via homebrew. You can safely ignore warnings that packages are already installed")
        # Ensure a fortran compiler is available
        brew_install("gcc")
        brew_install("openmpi")
        brew_install("python")
        brew_install("autoconf")
        brew_install("automake")
        brew_install("cmake")
        brew_install("libtool")

    else:
        log.info("Xcode and homebrew installation disabled. Proceeding on the rash assumption that packaged dependencies are in place.")

elif osname == "Linux":
    # Check for apt.
    try:
        if not args.package_manager:
            raise InstallError
        check_call(["apt-get", "--version"])

        apt_packages = ["build-essential",
                        "autoconf",
                        "automake",
                        "cmake",
                        "gfortran",
                        "git-core",
                        "libblas-dev",
                        "liblapack-dev",
                        "libopenmpi-dev",
                        "libtool",
                        "mercurial",
                        "openmpi-bin",
                        "python-dev",
                        "python-pip",
                        "zlib1g-dev"]

        missing_packages = [p for p in apt_packages if not apt_check(p)]
        if missing_packages:
            apt_install(missing_packages)

    except (subprocess.CalledProcessError, InstallError):
        log.info("apt-get not found or disabled. Proceeding on the rash assumption that your compiled dependencies are in place.")
        log.info("If this is not the case, please install the following and try again:")
        log.info("* A C and C++ compiler (for example gcc/g++ or clang), GNU make")
        log.info("* A Fortran compiler (for PETSc)")
        log.info("* MPI")
        log.info("* Blas and Lapack")
        log.info("* Git, Mercurial")
        log.info("* Python version 2.7")
        log.info("* pip and the Python headers")
        log.info("* autoconf, automake, libtool")
        log.info("* CMake")
        log.info("* zlib")

else:
    log.warn("You do not appear to be running Linux or MacOS. Please do not be surprised if this install fails.")


if mode == "install":
    try:
        import virtualenv
    except:
        log.info("Installing virtualenv.")
        # sys.real_prefix exists if we are already in the virtualenv
        if hasattr(sys, "real_prefix"):
            check_call(["pip", "install", "virtualenv"])
        else:
            check_call(["pip", "install", "--user", "virtualenv"])
        quit("Virtual env installed. Please run firedrake-%s again." % mode)
    log.info("Creating firedrake virtualenv.")
    virtualenv.create_environment("firedrake", site_packages=False)
    # For some reason virtualenv does not always install the latest pip.
    run_pip_install(["-U", "pip"])
virtual_env_vars = dict(__file__='firedrake/bin/activate_this.py')
execfile("firedrake/bin/activate_this.py", virtual_env_vars)
# Activating the virtual_env from within Python does not automatically set the environment variable.
os.environ["VIRTUAL_ENV"] = virtual_env_vars["base"]

os.chdir("firedrake")
if mode == "install":
    os.mkdir("src")
    os.chdir("src")

    git_clone("git+https://github.com/firedrakeproject/firedrake.git")
    if travis and travis_testing_firedrake:
        travis_pull_request = os.environ["TRAVIS_PULL_REQUEST"]
        travis_commit = os.environ["TRAVIS_COMMIT"]
        os.chdir("firedrake")
        if travis_pull_request != "false":
            check_call(["git", "fetch", "origin", "pull/" + travis_pull_request + "/merge"])
            check_call(["git", "checkout", "FETCH_HEAD"])
        else:
            check_call(["git", "checkout", travis_commit])
        os.chdir("..")

    packages = clone_dependencies("firedrake")
    packages = clone_dependencies("PyOP2") + packages
    packages += ["firedrake"]

    if args.honour_petsc_dir:
        packages.remove("petsc")

    # Force Cython to install first to work around pip dependency issues.
    run_pip_install(["Cython>=0.22"])

    # Need to install petsc first in order to resolve hdf5 dependency.
    if not args.honour_petsc_dir:
        pipinstall.append("--no-deps")
        packages.remove("petsc")
        log.info("Depending on your platform, PETSc may take an hour or more to build!")
        install("petsc/")
        pipinstall.pop()

    for p in packages:
        pip_requirements(p)

    build_and_install_h5py()
    build_and_install_glpsol()
    build_and_install_libspatialindex()
    pipinstall.append("--no-deps")
    for p in packages:
        install(p+"/")
        if args.developer:
            pdir = os.getcwd() + "/" + p + os.pathsep
            os.environ["PYTHONPATH"] = pdir + os.environ.get("PYTHONPATH", "")
            path_extension = pdir + path_extension

    # Work around easy-install.pth bug.
    if args.developer:
        try:
            packages.remove("petsc")
        except ValueError:
            pass
        packages.remove("petsc4py")
        packages.remove("firedrake")
        v = sys.version_info
        easyinstall = file("../lib/python%d.%d/site-packages/easy-install.pth" % (v.major, v.minor), "r").readlines()
        new_packages = [os.getcwd() + "/" + p + "\n" for p in packages]
        file("../lib/python%d.%d/site-packages/easy-install.pth" % (v.major, v.minor), "w").writelines(
            easyinstall[:1] + new_packages + easyinstall[1:])

    build_update_script()

else:
    # Update mode
    os.chdir("src")

    if args.update_script:
        # Pull firedrake, rebuild update script, launch new script
        git_update("firedrake")
        build_update_script()
        os.execv(sys.executable, [sys.executable, "../bin/firedrake-update", "--no-update-script"] + sys.argv[1:])

    deps = OrderedDict()
    deps.update(list_cloned_dependencies("PyOP2"))
    deps.update(list_cloned_dependencies("firedrake"))
    packages = deps.keys()
    packages += ["firedrake"]

    # update packages.
    if not args.honour_petsc_dir:
        petsc_changed = git_update("petsc", deps["petsc"])
    else:
        petsc_changed = False
    petsc4py_changed = git_update("petsc4py", deps["petsc4py"])

    packages.remove("petsc")
    packages.remove("petsc4py")

    if args.clean:
        clean_obsolete_packages()
        for package in packages:
            pip_uninstall(package)
        if args.rebuild:
            pip_uninstall("petsc")
            pip_uninstall("petsc4py")

    for p in packages:
        try:
            git_update(p, deps.get(p, None))
        except OSError as e:
            if e.errno == 2:
                log.warn("%s missing, cloning anew.\n" % p)
                git_clone(deps[p])
            else:
                raise

    # update dependencies.
    for p in packages:
        pip_requirements(p)
    pipinstall.append("--no-deps")

    # Only rebuild petsc if it has changed.
    if not args.honour_petsc_dir and (args.rebuild or petsc_changed):
        clean("petsc/")
        log.info("Depending on your platform, PETSc may take an hour or more to build!")
        install("petsc/")
    if args.rebuild or petsc_changed or petsc4py_changed:
        clean("petsc4py/")
        install("petsc4py/")

    # Always rebuild h5py.
    build_and_install_h5py()
    build_and_install_glpsol()
    build_and_install_libspatialindex()

    try:
        packages.remove("PyOP2")
        packages.remove("firedrake")
    except ValueError:
        pass
    packages += ("PyOP2", "firedrake")
    for p in packages:
        clean(p)
        install(p+"/")

if args.adjoint:
    build_and_install_adjoint()
if args.slepc:
    build_and_install_slepc()

os.chdir("../..")

log.info("Successfully installed Firedrake.\n")

log.info("To upgrade firedrake, run firedrake/bin/firedrake-update")

log.info("\nFiredrake has been installed in a python virtualenv. You activate it with:\n")
log.info("  . firedrake/bin/activate\n")
log.info("The virtualenv can be deactivated by running:\n")
log.info("  deactivate")


if travis:
    travis_writer.terminate()
