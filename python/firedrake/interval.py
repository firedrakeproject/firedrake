#!/usr/bin/env python
#    Copyright (C) 2007 Imperial College London and others.
#
#    Please see the AUTHORS file in the main source directory for a full list
#    of copyright holders.
#
#    Prof. C Pain
#    Applied Modelling and Computation Group
#    Department of Earth Science and Engineering
#    Imperial College London
#
#    amcgsoftware@imperial.ac.uk
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
#    USA

import sys
from numpy import *
import tempfile
import os


class get_interval_mesh(object):

    """ A class that can be used as a context manager of a .msh file that
    contains an interval mesh.
    It deletes the .msh file as soon as it is no longer required."""

    def __init__(self, nx):
        self._nx = nx

    def __enter__(self):
        name = tempfile.NamedTemporaryFile('w+r').name
        dx = 1.0 / self._nx
        # This ensures the rightmost point is actually present.
        nodes = arange(0, 1.0 + 0.01 * dx, dx)
        eles = [(i + 1, i + 2) for i in range(len(nodes) - 1)]
        dim = 1

        # Write the node file.
        nodefile = file(name + ".node", "w+r")

        # <# of vertices> <dimension> <# of attributes> <# of boundary markers>
        nodefile.write("%d %r 0 0\n" % (len(nodes), dim))
        for n, node in enumerate(nodes, 1):
            # <vertex #> <x>
            nodefile.write("%d %r\n" % (n, node))
        nodefile.write("# Generated by " + " ".join(sys.argv) + "\n")
        nodefile.seek(0)
        self._nodefile = nodefile
        # Write the ele file.

        elefile = file(name + ".ele", "w+r")

        # <# of intervals> <nodes per interval> <# of attributes>
        elefile.write("%d 2 1\n" % (len(nodes) - 1))

        for n, ele in enumerate(eles, 1):
            # <vertex #> <x> <region_id>

            elefile.write("%d %s 1\n" % (n, " ".join(map(str, ele))))

        elefile.write("# Generated by " + " ".join(sys.argv) + "\n")

        elefile.seek(0)
        self._elefile = elefile
        # Write the boundary file. We define the left boundary to have ID 1 and the
        # right boundary to have ID 2.

        boundaryfile = file(name + ".bound", "w")

        # <# of boundaries> <boundary marker flag>
        boundaryfile.write("2 1\n")

        # Left hand boundary.
        boundaryfile.write("1 1 1\n")

        # Right hand boundary.
        boundaryfile.write("2 %d 2\n" % len(nodes))

        boundaryfile.write("# Generated by " + " ".join(sys.argv) + "\n")

        boundaryfile.seek(0)
        self._boundaryfile = boundaryfile
        return self._nodefile.name

    def __exit__(self, type, value, traceback):
        self._nodefile.close()
        self._boundaryfile.close()
        self._elefile.close()


class periodic_interval_mesh(object):
    """A context manager used to build a periodic interval mesh"""

    def __init__(self, ncells):
        self._ncells = ncells

    def __enter__(self):
        nodes = arange(1, self._ncells + 1, dtype=float)
        ele = [[i + 1, i + 2] for i in range(self._ncells)]
        # Wrap around
        ele[-1][1] = 1
        name = tempfile.NamedTemporaryFile('w+r').name

        with file(name + '.node', 'w') as f:
            f.write("%d 1 0 0\n" % self._ncells)
            # Coordinate values are nonsense, fixed up elsewhere.
            for i, x in enumerate(nodes, 1):
                f.write("%d %g\n" % (i, x))
            f.write("# Generated by firedrake periodic_interval_mesh\n")
            self._nodefile = f.name
        with file(name + '.bound', 'w') as f:
            f.write("0 1\n# Generated by firedrake periodic_interval_mesh\n")
            self._boundaryfile = f.name
        with file(name + '.ele', 'w') as f:
            f.write("%d 2 0\n" % self._ncells)
            for i, (s, e) in enumerate(ele, 1):
                f.write("%d %d %d\n" % (i, s, e))
            f.write("# Generated by firedrake periodic_interval_mesh\n")
            self._elefile = f.name

        return self._nodefile

    def __exit__(self, *args):
        os.remove(self._nodefile)
        os.remove(self._elefile)
        os.remove(self._boundaryfile)
