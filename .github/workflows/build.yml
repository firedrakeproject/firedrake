name: CI

on:
  push:
    branches:
      - master
  pull_request:
  schedule:
    - cron: '0 0 * * 0'
    - cron: '0 0 1 * *'  # Monthly release

concurrency:
  # Cancel running jobs if new commits are pushed
  group: >
    ${{ github.workflow }}-
    ${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RELEASE_TAG: latest

jobs:
  test:
    name: Install and test Firedrake (Linux)
    strategy:
      # We want to know all of the tests which fail, so don't kill real if
      # complex fails and vice-versa
      fail-fast: false
      matrix:
        arch: [default, complex]
    runs-on: [self-hosted, Linux]
    container:
      image: ubuntu:latest
    env:
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMP_NUM_THREADS: 1
      OPENBLAS_NUM_THREADS: 1
      FIREDRAKE_CI: 1
      PYOP2_CI_TESTS: 1
      PYOP2_SPMD_STRICT: 1
      EXTRA_PYTEST_ARGS: --splitting-algorithm least_duration --timeout=600 --timeout-method=thread -o faulthandler_timeout=660 firedrake-repo/tests/firedrake
    steps:
      - name: Fix HOME
        # For unknown reasons GitHub actions overwrite HOME to /github/home
        # which will break everything unless fixed
        # (https://github.com/actions/runner/issues/863)
        run: echo "HOME=/root" >> "$GITHUB_ENV"

      - name: Pre-run cleanup
        # Make sure the current directory is empty
        run: find . -delete

      - uses: actions/checkout@v4
        with:
          path: firedrake-repo

      - name: Install system dependencies
        run: |
          apt-get update
          apt-get -y install python3
          apt-get -y install \
            $(python3 ./firedrake-repo/scripts/firedrake-configure --arch ${{ matrix.arch }} --show-system-packages) python3-venv parallel

      - name: Install PETSc
        run: |
          git clone --depth 1 --branch $(python3 ./firedrake-repo/scripts/firedrake-configure --show-petsc-version) https://gitlab.com/petsc/petsc.git
          cd petsc
          python3 ../firedrake-repo/scripts/firedrake-configure \
            --arch ${{ matrix.arch }} --show-petsc-configure-options | \
            xargs -L1 ./configure --with-make-np=12
          make PETSC_DIR=/__w/firedrake/firedrake/petsc PETSC_ARCH=arch-firedrake-${{ matrix.arch }}
          make check
          echo "PETSC_DIR=/__w/firedrake/firedrake/petsc" >> "$GITHUB_ENV"
          echo "PETSC_ARCH=arch-firedrake-${{ matrix.arch }}" >> "$GITHUB_ENV"

      - name: Install SLEPc
        run: |
          git clone --depth 1 --branch $(python3 ./firedrake-repo/scripts/firedrake-configure --show-slepc-version) https://gitlab.com/slepc/slepc.git
          cd slepc
          ./configure
          make SLEPC_DIR=/__w/firedrake/firedrake/slepc
          echo "SLEPC_DIR=/__w/firedrake/firedrake/slepc" >> "$GITHUB_ENV"

      - name: Install Firedrake
        id: install
        run: |
          export $(python3 ./firedrake-repo/scripts/firedrake-configure --arch ${{ matrix.arch }} --show-env)
          python3 -m venv venv
          . venv/bin/activate
          : # Force a rebuild of petsc4py as the cached one will not link to the fresh
          : # install of PETSc.
          pip cache remove petsc4py
          pip install --verbose \
            --no-binary h5py \
            --extra-index-url https://download.pytorch.org/whl/cpu \
            './firedrake-repo[ci]'
          firedrake-clean
          pip list

      - name: Run firedrake-check
        run: |
          . venv/bin/activate
          firedrake-check
        timeout-minutes: 5

      - name: Run tests (nprocs = 1)
        # Run even if earlier tests failed
        if: ${{ success() || steps.install.conclusion == 'success' }}
        run: |
          . venv/bin/activate
          : # Use pytest-xdist here so we can have a single collated output (not possible
          : # for parallel tests)
          firedrake-run-split-tests 1 1 "-n 12 $EXTRA_PYTEST_ARGS"
        timeout-minutes: 60

      - name: Run tests (nprocs = 2)
        if: ${{ success() || steps.install.conclusion == 'success' }}
        run: |
          . venv/bin/activate
          firedrake-run-split-tests 2 6 "$EXTRA_PYTEST_ARGS"
        timeout-minutes: 30

      - name: Run tests (nprocs = 3)
        if: ${{ success() || steps.install.conclusion == 'success' }}
        run: |
          . venv/bin/activate
          firedrake-run-split-tests 3 4 "$EXTRA_PYTEST_ARGS"
        timeout-minutes: 60

      - name: Run tests (nprocs = 4)
        if: ${{ success() || steps.install.conclusion == 'success' }}
        run: |
          . venv/bin/activate
          firedrake-run-split-tests 4 3 "$EXTRA_PYTEST_ARGS"
        timeout-minutes: 15

      - name: Run tests (nprocs = 5)
        if: ${{ success() || steps.install.conclusion == 'success' }}
        run: |
          . venv/bin/activate
          firedrake-run-split-tests 5 2 "$EXTRA_PYTEST_ARGS"
        timeout-minutes: 15

      - name: Run tests (nprocs = 6)
        if: ${{ success() || steps.install.conclusion == 'success' }}
        run: |
          . venv/bin/activate
          firedrake-run-split-tests 6 2 "$EXTRA_PYTEST_ARGS"
        timeout-minutes: 15

      - name: Run tests (nprocs = 7)
        if: ${{ success() || steps.install.conclusion == 'success' }}
        run: |
          . venv/bin/activate
          firedrake-run-split-tests 7 1 "$EXTRA_PYTEST_ARGS"
        timeout-minutes: 15

      - name: Run tests (nprocs = 8)
        if: ${{ success() || steps.install.conclusion == 'success' }}
        run: |
          . venv/bin/activate
          firedrake-run-split-tests 8 1 "$EXTRA_PYTEST_ARGS"
        timeout-minutes: 15

      - name: Run Gusto smoke tests
        # Only test Gusto in real mode
        if: (success() || steps.install.conclusion == 'success') && matrix.arch == 'default'
        run: |
          . venv/bin/activate
          git clone --depth 1 https://github.com/firedrakeproject/gusto.git gusto-repo
          pip install --verbose ./gusto-repo
          python -m pytest -n 12 --verbose \
            gusto-repo/integration-tests/balance/test_saturated_balance.py \
            gusto-repo/integration-tests/equations/test_thermal_sw.py \
            gusto-repo/integration-tests/transport/test_embedded_dg_advection.py
        timeout-minutes: 10

      - name: Run spyro smoke tests
        if: (success() || steps.install.conclusion == 'success') && matrix.arch == 'default'
        run: |
          . venv/bin/activate
          git clone --depth 1 https://github.com/NDF-Poli-USP/spyro.git spyro-repo
          pip install --verbose ./spyro-repo
          mpiexec -n 6 python -m pytest spyro-repo/test_integration/ -m parallel[6]
        timeout-minutes: 5

      - name: Run G-ADOPT smoke tests
        if: (success() || steps.install.conclusion == 'success') && matrix.arch == 'default'
        run: |
          . venv/bin/activate
          git clone --depth 1 https://github.com/g-adopt/g-adopt.git g-adopt-repo
          pip install --verbose ./g-adopt-repo
          make -C g-adopt-repo/demos/mantle_convection/base_case check
        timeout-minutes: 5

      - name: Upload log files
        uses: actions/upload-artifact@v4
        if: success() || steps.install.conclusion == 'success'
        with:
          name: firedrake-logs-${{ matrix.arch }}
          path: pytest_*.log

      - name: Post-run cleanup
        if: always()
        run: find . -delete

  docker_tag:
    name: "Set the Docker release tag"
    runs-on: [self-hosted, Linux]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Set release tag
        # Set a release tag if triggered by monthly CRON job
        if: github.event.schedule == '0 0 1 * *'
        run: |
          DATE_TAG="$(date +%Y-%m)"
          echo "RELEASE_TAG=$DATE_TAG" >> "$GITHUB_ENV"
      - name: Print release tag being used
        run: |
          echo The release tag is "$RELEASE_TAG"
    outputs:
      tag: ${{ env.RELEASE_TAG }}

  docker:
    name: Build Docker containers
    if: github.ref == 'refs/heads/master'
    needs: [test, docker_tag]
    uses: ./.github/workflows/docker.yml
    with:
      tag: ${{ needs.docker_tag.outputs.tag }}
      status: ${{ needs.test.result }}
    secrets: inherit

  lint:
    name: Lint codebase
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Setup flake8 annotations
        uses: rbialon/flake8-annotations@v1
      - name: Install linting packages
        run: pip install flake8 pylint
      - name: Lint codebase
        run: make lint GITHUB_ACTIONS_FORMATTING=1

  zenodo_canary:
    name: Run zenodo canary
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install deps
        run: pip install requests packaging
      - name: Zenodo API canary
        run: python scripts/firedrake-install --test-doi-resolution
      - name: Upload log
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: "zenodo-canary"
          path: firedrake-install.log
